# -*- coding: utf-8 -*-
"""Limpieza.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zHqfexgL1Ebj_ckmabVWPuMZWmABGBOV
"""

# =========================================================
# EDA - INSTITUTO TALENTO FUTURO (dataset √∫nico)
# =========================================================

# 1Ô∏è‚É£ Importar librer√≠as
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Configuraci√≥n visual
sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# 2Ô∏è‚É£ Cargar dataset √∫nico
# Subir archivo Excel o CSV a Colab
df = pd.read_excel("/content/estudiantes_tecnicos_limpiiiio.xlsx")  # o pd.read_csv("talento_futuro_completo.csv")

# 3Ô∏è‚É£ Revisar datos generales
print("===== Datos generales =====")
print(df.head())
print(df.info())
print(df.describe(include='all'))

# 4Ô∏è‚É£ Limpieza b√°sica
# Rellenar nulos num√©ricos
num_cols = df.select_dtypes(include=np.number).columns.tolist()
for col in num_cols:
    df[col] = df[col].fillna(df[col].mean())

# Rellenar nulos categ√≥ricos
cat_cols = df.select_dtypes(include='object').columns.tolist()
for col in cat_cols:
    df[col] = df[col].fillna("Desconocido")

# Eliminar duplicados
df = df.drop_duplicates()

# 5Ô∏è‚É£ An√°lisis descriptivo
print("===== Estad√≠sticas generales =====")
print(df.describe(include='all'))

# 6Ô∏è‚É£ Promedio acad√©mico por programa
plt.figure()
sns.barplot(data=df.groupby('id_programa')['promedio'].mean().reset_index(),
            x='promedio', y='id_programa', palette="viridis")
plt.title("Promedio acad√©mico por programa")
plt.xlabel("Promedio")
plt.ylabel("Programa")
plt.show()

# 7Ô∏è‚É£ Asistencia promedio por programa
plt.figure()
sns.barplot(data=df.groupby('id_programa')['asistencia'].mean().reset_index(),
            x='asistencia', y='id_programa', palette="magma")
plt.title("Asistencia promedio por programa")
plt.xlabel("Asistencia (%)")
plt.ylabel("Programa")
plt.show()

# 8Ô∏è‚É£ Estado acad√©mico por programa
estado_programa = df.groupby(['id_programa','estado_academico']).size().unstack(fill_value=0)
estado_programa.plot(kind='bar', stacked=True, colormap='tab20')
plt.title("Estado acad√©mico por programa")
plt.xlabel("Programa")
plt.ylabel("N√∫mero de estudiantes")
plt.show()

# 9Ô∏è‚É£ Distribuci√≥n de estudiantes por sede
plt.figure()
sns.countplot(data=df, x='id_sede', palette="Set2")
plt.title("N√∫mero de estudiantes por sede")
plt.xlabel("Sede")
plt.ylabel("Cantidad de estudiantes")
plt.show()

# üîü Distribuci√≥n de promedio por g√©nero
plt.figure()
sns.boxplot(data=df, x='genero', y='promedio', palette="pastel")
plt.title("Distribuci√≥n de promedio acad√©mico por g√©nero")
plt.xlabel("G√©nero")
plt.ylabel("Promedio")
plt.show()

# 1Ô∏è‚É£1Ô∏è‚É£ Distribuci√≥n de edad
plt.figure()
sns.histplot(df['edad'], bins=15, kde=True, color='skyblue')
plt.title("Distribuci√≥n de edad de estudiantes")
plt.xlabel("Edad")
plt.ylabel("Cantidad de estudiantes")
plt.show()

# 1Ô∏è‚É£2Ô∏è‚É£ Promedio acad√©mico por instructor
instr_promedio = df.groupby('id_instructor')['promedio'].mean().sort_values(ascending=False)
plt.figure()
instr_promedio.plot(kind='bar', color='coral')
plt.title("Promedio acad√©mico por instructor")
plt.xlabel("Instructor")
plt.ylabel("Promedio")
plt.show()

# 1Ô∏è‚É£3Ô∏è‚É£ Correlaci√≥n entre variables num√©ricas
plt.figure()
sns.heatmap(df[['promedio','asistencia','edad','duracion_meses','costo_matricula','experiencia_a√±os']].corr(),
            annot=True, cmap='coolwarm')
plt.title("Mapa de correlaciones")
plt.show()

# ‚úÖ EDA completo
print("EDA completado. Dataset listo para an√°lisis avanzado e insights accionables.")

print(df.columns)

# =========================================================
# EDA COMPLETO - INSTITUTO TALENTO FUTURO
# Dataset √∫nico (todas las tablas combinadas)
# =========================================================

# 1Ô∏è‚É£ Importar librer√≠as
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# 2Ô∏è‚É£ Cargar dataset √∫nico
df = pd.read_excel("/content/estudiantes_tecnicos_limpiiiio.xlsx")  # o pd.read_csv("talento_futuro_completo.csv")

# 3Ô∏è‚É£ Revisar datos generales
print("===== Primeras filas =====")
print(df.head())
print("\n===== Informaci√≥n del dataset =====")
print(df.info())
print("\n===== Estad√≠sticas generales =====")
print(df.describe(include='all'))

# 4Ô∏è‚É£ Limpieza b√°sica
# N√∫meros
num_cols = df.select_dtypes(include=np.number).columns
for col in num_cols:
    df[col] = df[col].fillna(df[col].mean())

# Categ√≥ricos
cat_cols = df.select_dtypes(include='object').columns
for col in cat_cols:
    df[col] = df[col].fillna("Desconocido")

# Eliminar duplicados
df = df.drop_duplicates()

# 5Ô∏è‚É£ Distribuci√≥n de promedio acad√©mico
plt.figure()
sns.histplot(df['promedio'], bins=15, kde=True, color='skyblue')
plt.title("Distribuci√≥n de promedio acad√©mico")
plt.xlabel("Promedio")
plt.ylabel("Cantidad de estudiantes")
plt.show()

# 6Ô∏è‚É£ Distribuci√≥n de asistencia
plt.figure()
sns.histplot(df['asistencia'], bins=15, kde=True, color='salmon')
plt.title("Distribuci√≥n de asistencia")
plt.xlabel("Asistencia (%)")
plt.ylabel("Cantidad de estudiantes")
plt.show()

# 7Ô∏è‚É£ Estado acad√©mico por programa
if 'nombre_programa' in df.columns:
    estado_programa = df.groupby(['nombre_programa','estado_academico']).size().unstack(fill_value=0)
    estado_programa.plot(kind='bar', stacked=True, colormap='tab20')
    plt.title("Estado acad√©mico por programa")
    plt.xlabel("Programa")
    plt.ylabel("Cantidad de estudiantes")
    plt.show()

# 8Ô∏è‚É£ Promedio acad√©mico por programa
if 'nombre_programa' in df.columns:
    plt.figure()
    sns.barplot(data=df.groupby('nombre_programa')['promedio'].mean().reset_index(),
                x='promedio', y='nombre_programa', palette="viridis")
    plt.title("Promedio acad√©mico por programa")
    plt.xlabel("Promedio")
    plt.ylabel("Programa")
    plt.show()

# 9Ô∏è‚É£ Asistencia promedio por programa
if 'nombre_programa' in df.columns:
    plt.figure()
    sns.barplot(data=df.groupby('nombre_programa')['asistencia'].mean().reset_index(),
                x='asistencia', y='nombre_programa', palette="magma")
    plt.title("Asistencia promedio por programa")
    plt.xlabel("Asistencia (%)")
    plt.ylabel("Programa")
    plt.show()

# üîü Distribuci√≥n de estudiantes por sede
if 'nombre_sede' in df.columns:
    plt.figure()
    sns.countplot(data=df, x='nombre_sede', palette="Set2")
    plt.title("N√∫mero de estudiantes por sede")
    plt.xlabel("Sede")
    plt.ylabel("Cantidad de estudiantes")
    plt.show()

# 1Ô∏è‚É£1Ô∏è‚É£ Promedio por g√©nero
if 'genero' in df.columns:
    plt.figure()
    sns.boxplot(data=df, x='genero', y='promedio', palette="pastel")
    plt.title("Distribuci√≥n de promedio acad√©mico por g√©nero")
    plt.xlabel("G√©nero")
    plt.ylabel("Promedio")
    plt.show()

# 1Ô∏è‚É£2Ô∏è‚É£ Distribuci√≥n de edad
if 'edad' in df.columns:
    plt.figure()
    sns.histplot(df['edad'], bins=15, kde=True, color='lightgreen')
    plt.title("Distribuci√≥n de edad de estudiantes")
    plt.xlabel("Edad")
    plt.ylabel("Cantidad de estudiantes")
    plt.show()

# 1Ô∏è‚É£3Ô∏è‚É£ Promedio acad√©mico por instructor
if 'nombre_instructor' in df.columns:
    instr_promedio = df.groupby('nombre_instructor')['promedio'].mean().sort_values(ascending=False)
    plt.figure()
    instr_promedio.plot(kind='bar', color='coral')
    plt.title("Promedio acad√©mico por instructor")
    plt.xlabel("Instructor")
    plt.ylabel("Promedio")
    plt.show()

# 1Ô∏è‚É£4Ô∏è‚É£ Correlaciones
num_vars = ['promedio','asistencia','edad','duracion_meses','costo_matricula','experiencia_a√±os']
num_vars = [col for col in num_vars if col in df.columns]  # solo columnas que existen
plt.figure()
sns.heatmap(df[num_vars].corr(), annot=True, cmap='coolwarm')
plt.title("Mapa de correlaciones")
plt.show()

print("‚úÖ EDA completo en dataset √∫nico finalizado.")

# =========================================================
# EDA Reto Talento Futuro - Instituto T√©cnico Laboral
# Dataset √∫nico (todas las tablas combinadas)
# =========================================================

# 1Ô∏è‚É£ Importar librer√≠as
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# 2Ô∏è‚É£ Cargar dataset √∫nico
df = pd.read_excel("/content/estudiantes_tecnicos_limpiiiio.xlsx")  # o pd.read_csv("talento_futuro_completo.csv")

# 3Ô∏è‚É£ Revisi√≥n inicial
print("===== Primeras filas =====")
print(df.head())
print("\n===== Informaci√≥n del dataset =====")
print(df.info())
print("\n===== Estad√≠sticas generales =====")
print(df.describe(include='all'))

# 4Ô∏è‚É£ Limpieza b√°sica
num_cols = df.select_dtypes(include=np.number).columns
cat_cols = df.select_dtypes(include='object').columns

for col in num_cols:
    df[col] = df[col].fillna(df[col].mean())

for col in cat_cols:
    df[col] = df[col].fillna("Desconocido")

df = df.drop_duplicates()

# 5Ô∏è‚É£ Identificar programas con mayor riesgo de deserci√≥n o bajo rendimiento
# Se asume que estado_academico tiene categor√≠as: 'Aprobado', 'Reprobado', 'Retirado', etc.
if 'id_programa' in df.columns and 'estado_academico' in df.columns:
    programa_riesgo = df.groupby('id_programa')['estado_academico'].value_counts(normalize=True).unstack().fillna(0)
    if 'Reprobado' in programa_riesgo.columns or 'Retirado' in programa_riesgo.columns:
        programa_riesgo['riesgo'] = programa_riesgo.get('Reprobado',0) + programa_riesgo.get('Retirado',0)
        programa_riesgo = programa_riesgo.sort_values(by='riesgo', ascending=False)
        print("\n===== Programas con mayor riesgo de deserci√≥n o bajo rendimiento =====")
        print(programa_riesgo[['riesgo']])

        # Visualizaci√≥n
        plt.figure()
        sns.barplot(x=programa_riesgo.index, y=programa_riesgo['riesgo'], palette="Reds_r")
        plt.xticks(rotation=45)
        plt.title("Riesgo de deserci√≥n/bajo rendimiento por programa")
        plt.ylabel("Proporci√≥n de estudiantes en riesgo")
        plt.xlabel("Programa")
        plt.show()

# 6Ô∏è‚É£ An√°lisis de factores demogr√°ficos (edad, g√©nero, estrato, barrio)
# Promedio por g√©nero
# if 'genero' in df.columns: # Commented out as 'genero' column is missing
#     plt.figure()
#     sns.boxplot(data=df, x='genero', y='promedio', palette="pastel")
#     plt.title("Promedio acad√©mico por g√©nero")
#     plt.xlabel("G√©nero")
#     plt.ylabel("Promedio")
#     plt.show()

# Promedio por estrato
if 'estrato' in df.columns and 'promedio' in df.columns:
    plt.figure()
    sns.boxplot(data=df, x='estrato', y='promedio', palette="Set3")
    plt.title("Promedio acad√©mico por estrato")
    plt.xlabel("Estrato")
    plt.ylabel("Promedio")
    plt.show()

# Asistencia por barrio
if 'barrio' in df.columns and 'asistencia' in df.columns:
    asistencia_barrio = df.groupby('barrio')['asistencia'].mean().sort_values(ascending=False)
    plt.figure()
    asistencia_barrio.plot(kind='bar', color='skyblue')
    plt.title("Asistencia promedio por barrio")
    plt.ylabel("Asistencia (%)")
    plt.xlabel("Barrio")
    plt.show()

# Edad vs promedio
if 'edad' in df.columns and 'promedio' in df.columns and 'id_programa' in df.columns:
    plt.figure()
    sns.scatterplot(data=df, x='edad', y='promedio', hue='id_programa', palette='tab10')
    plt.title("Relaci√≥n edad vs promedio acad√©mico")
    plt.xlabel("Edad")
    plt.ylabel("Promedio")
    plt.legend(bbox_to_anchor=(1.05, 1), loc=2)
    plt.show()


# 7Ô∏è‚É£ An√°lisis de efectividad de instructores
if 'id_instructor' in df.columns and 'promedio' in df.columns:
    instr_promedio = df.groupby('id_instructor')['promedio'].mean().sort_values(ascending=False)
    print("\n===== Promedio acad√©mico por instructor =====")
    print(instr_promedio)

    plt.figure()
    instr_promedio.plot(kind='bar', color='coral')
    plt.title("Promedio acad√©mico por instructor")
    plt.ylabel("Promedio")
    plt.xlabel("Instructor")
    plt.show()

# 8Ô∏è‚É£ Desempe√±o acad√©mico por sede
if 'id_sede' in df.columns and 'promedio' in df.columns and 'asistencia' in df.columns:
    sede_promedio = df.groupby('id_sede')['promedio'].mean().sort_values(ascending=False)
    sede_asistencia = df.groupby('id_sede')['asistencia'].mean().sort_values(ascending=False)

    plt.figure()
    sede_promedio.plot(kind='bar', color='lightgreen', alpha=0.7, label='Promedio')
    sede_asistencia.plot(kind='bar', color='skyblue', alpha=0.7, label='Asistencia')
    plt.title("Desempe√±o acad√©mico y asistencia por sede")
    plt.ylabel("Promedio / Asistencia (%)")
    plt.xlabel("Sede")
    plt.legend()
    plt.show()

# 9Ô∏è‚É£ Evaluaci√≥n de rentabilidad de programas
# Rentabilidad simple: promedio de estudiantes * costo_matricula / duracion_meses
if 'id_programa' in df.columns and 'costo_matricula' in df.columns and 'duracion_meses' in df.columns and 'promedio' in df.columns:
    programa_valor = df.groupby('id_programa').agg(
        estudiantes_activos=('id_estudiante', 'count'),
        promedio_academico=('promedio', 'mean'),
        costo_matricula=('costo_matricula', 'mean'),
        duracion_meses=('duracion_meses', 'mean')
    )
    # Check if costo_matricula and duracion_meses are not zero before calculating valor_relativo
    if (programa_valor['costo_matricula'] > 0).all() and (programa_valor['duracion_meses'] > 0).all():
        programa_valor['valor_relativo'] = (programa_valor['estudiantes_activos'] * programa_valor['promedio_academico']) / (programa_valor['costo_matricula'] / programa_valor['duracion_meses'])
        programa_valor = programa_valor.sort_values(by='valor_relativo', ascending=False)
        print("\n===== Programas con mayor valor relativo =====")
        print(programa_valor[['valor_relativo', 'estudiantes_activos', 'promedio_academico', 'costo_matricula']])

        plt.figure()
        sns.barplot(x=programa_valor.index, y=programa_valor['valor_relativo'], palette="viridis")
        plt.xticks(rotation=45)
        plt.title("Valor relativo de los programas")
        plt.ylabel("Valor relativo")
        plt.xlabel("Programa")
        plt.show()
    else:
        print("\n===== Cannot calculate Valor Relativo: Costo de Matricula or Duracion Meses contains zero values =====")


# üîü Correlaciones num√©ricas
num_vars = ['promedio','asistencia','edad','duracion_meses','costo_matricula','experiencia_a√±os']
num_vars = [col for col in num_vars if col in df.columns]
if num_vars:
    plt.figure()
    sns.heatmap(df[num_vars].corr(), annot=True, cmap='coolwarm')
    plt.title("Mapa de correlaciones")
    plt.show()

print("‚úÖ EDA completo alineado al reto Talento Futuro finalizado.")

print(df.columns)
# Convertir a min√∫sculas, eliminar espacios y reemplazar espacios por guion bajo
df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")
print(df.columns)

# =========================================================
# EDA Reto Talento Futuro - Instituto T√©cnico Laboral
# Dataset: hechos_academicos (IDs de programa, sede, instructor, estudiante)
# =========================================================

# 1Ô∏è‚É£ Importar librer√≠as
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# 2Ô∏è‚É£ Cargar dataset √∫nico
df = pd.read_excel("/content/estudiantes_tecnicos_limpiiiio.xlsx")  # o pd.read_csv("hechos_academicos.csv")

# 3Ô∏è‚É£ Revisi√≥n inicial
print("===== Primeras filas =====")
print(df.head())
print("\n===== Informaci√≥n del dataset =====")
print(df.info())
print("\n===== Estad√≠sticas generales =====")
print(df.describe(include='all'))

# 4Ô∏è‚É£ Limpieza b√°sica
# N√∫meros
num_cols = df.select_dtypes(include=np.number).columns
for col in num_cols:
    df[col] = df[col].fillna(df[col].mean())

# Categ√≥ricos
cat_cols = df.select_dtypes(include='object').columns
for col in cat_cols:
    df[col] = df[col].fillna("Desconocido")

# Eliminar duplicados
df = df.drop_duplicates()

# 5Ô∏è‚É£ Identificar programas con mayor riesgo de deserci√≥n o bajo rendimiento
# Riesgo = proporci√≥n de estudiantes "Reprobado" o "Retirado"
programa_riesgo = df.groupby('id_programa')['estado_academico'].value_counts(normalize=True).unstack().fillna(0)
programa_riesgo['riesgo'] = programa_riesgo.get('Reprobado',0) + programa_riesgo.get('Retirado',0)
programa_riesgo = programa_riesgo.sort_values(by='riesgo', ascending=False)
print("\n===== Programas con mayor riesgo =====")
print(programa_riesgo[['riesgo']])

# Visualizaci√≥n
plt.figure()
sns.barplot(x=programa_riesgo.index, y=programa_riesgo['riesgo'], palette="Reds_r")
plt.title("Riesgo de deserci√≥n/bajo rendimiento por programa (ID)")
plt.xlabel("ID Programa")
plt.ylabel("Proporci√≥n de estudiantes en riesgo")
plt.show()

# 6Ô∏è‚É£ Distribuci√≥n de promedio acad√©mico
plt.figure()
sns.histplot(df['promedio'], bins=20, kde=True, color='skyblue')
plt.title("Distribuci√≥n de promedio acad√©mico")
plt.xlabel("Promedio")
plt.ylabel("Cantidad de estudiantes")
plt.show()

# 7Ô∏è‚É£ Distribuci√≥n de asistencia
plt.figure()
sns.histplot(df['asistencia'], bins=20, kde=True, color='salmon')
plt.title("Distribuci√≥n de asistencia")
plt.xlabel("Asistencia (%)")
plt.ylabel("Cantidad de estudiantes")
plt.show()

# 8Ô∏è‚É£ Estado acad√©mico general
estado_counts = df['estado_academico'].value_counts()
plt.figure()
estado_counts.plot(kind='bar', color='violet')
plt.title("N√∫mero de estudiantes por estado acad√©mico")
plt.xlabel("Estado acad√©mico")
plt.ylabel("Cantidad de estudiantes")
plt.show()

# 9Ô∏è‚É£ An√°lisis de efectividad de instructores
instr_promedio = df.groupby('id_instructor')['promedio'].mean().sort_values(ascending=False)
print("\n===== Promedio acad√©mico por instructor (ID) =====")
print(instr_promedio)

plt.figure()
instr_promedio.plot(kind='bar', color='coral')
plt.title("Promedio acad√©mico por instructor (ID)")
plt.xlabel("ID Instructor")
plt.ylabel("Promedio")
plt.show()

# 10Ô∏è‚É£ An√°lisis de desempe√±o por sede
sede_promedio = df.groupby('id_sede')['promedio'].mean().sort_values(ascending=False)
sede_asistencia = df.groupby('id_sede')['asistencia'].mean().sort_values(ascending=False)

plt.figure()
sede_promedio.plot(kind='bar', color='lightgreen', alpha=0.7, label='Promedio')
sede_asistencia.plot(kind='bar', color='skyblue', alpha=0.7, label='Asistencia')
plt.title("Desempe√±o acad√©mico y asistencia por sede (ID)")
plt.xlabel("ID Sede")
plt.ylabel("Promedio / Asistencia (%)")
plt.legend()
plt.show()

# 11Ô∏è‚É£ Correlaciones
num_vars = ['promedio','asistencia']
plt.figure()
sns.heatmap(df[num_vars].corr(), annot=True, cmap='coolwarm')
plt.title("Mapa de correlaciones entre promedio y asistencia")
plt.show()

# 12Ô∏è‚É£ An√°lisis de rentabilidad (aproximada)
# Suponiendo que costo_matricula y duracion_meses son parte de df
if 'costo_matricula' in df.columns and 'duracion_meses' in df.columns:
    programa_valor = df.groupby('id_programa').agg(
        estudiantes_activos=('id_estudiante', 'count'),
        promedio_academico=('promedio', 'mean'),
        costo_matricula=('costo_matricula', 'mean'),
        duracion_meses=('duracion_meses', 'mean')
    )
    programa_valor['valor_relativo'] = (programa_valor['estudiantes_activos'] * programa_valor['promedio_academico']) / programa_valor['costo_matricula']
    programa_valor = programa_valor.sort_values(by='valor_relativo', ascending=False)
    print("\n===== Programas con mayor valor relativo (ID) =====")
    print(programa_valor[['valor_relativo','estudiantes_activos','promedio_academico','costo_matricula']])

    plt.figure()
    sns.barplot(x=programa_valor.index, y=programa_valor['valor_relativo'], palette="viridis")
    plt.title("Valor relativo de programas (ID)")
    plt.xlabel("ID Programa")
    plt.ylabel("Valor relativo")
    plt.show()

print("‚úÖ EDA completo para el reto Talento Futuro (basado en IDs) finalizado.")

# =========================================================
# EDA Reto Talento Futuro - Instituto T√©cnico Laboral
# Dataset: hechos_academicos (IDs de programa, sede, instructor, estudiante)
# Sin gr√°ficos, solo resultados en texto
# =========================================================

# 1Ô∏è‚É£ Importar librer√≠as
import pandas as pd
import numpy as np

# 2Ô∏è‚É£ Cargar dataset √∫nico
df = pd.read_excel("/content/estudiantes_tecnicos_limpiiiio.xlsx")  # o pd.read_csv("hechos_academicos.csv")

# 3Ô∏è‚É£ Revisi√≥n inicial
print("===== Primeras filas =====")
print(df.head())
print("\n===== Informaci√≥n del dataset =====")
print(df.info())
print("\n===== Estad√≠sticas generales =====")
print(df.describe(include='all'))

# 4Ô∏è‚É£ Limpieza b√°sica
# N√∫meros
num_cols = df.select_dtypes(include=np.number).columns
for col in num_cols:
    df[col] = df[col].fillna(df[col].mean())

# Categ√≥ricos
cat_cols = df.select_dtypes(include='object').columns
for col in cat_cols:
    df[col] = df[col].fillna("Desconocido")

# Eliminar duplicados
df = df.drop_duplicates()

# 5Ô∏è‚É£ Identificar programas con mayor riesgo de deserci√≥n o bajo rendimiento
programa_riesgo = df.groupby('id_programa')['estado_academico'].value_counts(normalize=True).unstack().fillna(0)
programa_riesgo['riesgo'] = programa_riesgo.get('Reprobado',0) + programa_riesgo.get('Retirado',0)
programa_riesgo = programa_riesgo.sort_values(by='riesgo', ascending=False)
print("\n===== Programas con mayor riesgo =====")
print(programa_riesgo[['riesgo']])

# 6Ô∏è‚É£ Distribuci√≥n de promedio acad√©mico
promedio_desc = df['promedio'].describe()
print("\n===== Distribuci√≥n de promedio acad√©mico =====")
print(promedio_desc)

# 7Ô∏è‚É£ Distribuci√≥n de asistencia
asistencia_desc = df['asistencia'].describe()
print("\n===== Distribuci√≥n de asistencia =====")
print(asistencia_desc)

# 8Ô∏è‚É£ Estado acad√©mico general
estado_counts = df['estado_academico'].value_counts()
print("\n===== N√∫mero de estudiantes por estado acad√©mico =====")
print(estado_counts)

# 9Ô∏è‚É£ An√°lisis de efectividad de instructores
instr_promedio = df.groupby('id_instructor')['promedio'].mean().sort_values(ascending=False)
print("\n===== Promedio acad√©mico por instructor (ID) =====")
print(instr_promedio)

# 10Ô∏è‚É£ An√°lisis de desempe√±o por sede
sede_promedio = df.groupby('id_sede')['promedio'].mean().sort_values(ascending=False)
sede_asistencia = df.groupby('id_sede')['asistencia'].mean().sort_values(ascending=False)
print("\n===== Promedio acad√©mico por sede (ID) =====")
print(sede_promedio)
print("\n===== Asistencia promedio por sede (ID) =====")
print(sede_asistencia)

# 11Ô∏è‚É£ Correlaciones
num_vars = ['promedio','asistencia']
correlaciones = df[num_vars].corr()
print("\n===== Correlaciones entre promedio y asistencia =====")
print(correlaciones)

# 12Ô∏è‚É£ An√°lisis de rentabilidad aproximada
if 'costo_matricula' in df.columns and 'duracion_meses' in df.columns:
    programa_valor = df.groupby('id_programa').agg(
        estudiantes_activos=('id_estudiante', 'count'),
        promedio_academico=('promedio', 'mean'),
        costo_matricula=('costo_matricula', 'mean'),
        duracion_meses=('duracion_meses', 'mean')
    )
    programa_valor['valor_relativo'] = (programa_valor['estudiantes_activos'] * programa_valor['promedio_academico']) / programa_valor['costo_matricula']
    programa_valor = programa_valor.sort_values(by='valor_relativo', ascending=False)
    print("\n===== Programas con mayor valor relativo (ID) =====")
    print(programa_valor[['valor_relativo','estudiantes_activos','promedio_academico','costo_matricula']])

print("\n‚úÖ EDA completo para el reto Talento Futuro (basado en IDs) finalizado.")

# =========================================================
# Programas m√°s rentables y con mayor cantidad de estudiantes
# =========================================================

import pandas as pd

# Cargar dataset √∫nico
df = pd.read_excel("/content/estudiantes_tecnicos_limpiiiio.xlsx")  # o pd.read_csv(...)

# Limpieza b√°sica (llenar valores faltantes)
df['promedio'] = df['promedio'].fillna(df['promedio'].mean())
# The columns 'costo_matricula' and 'duracion_meses' were not found in the dataframe.
# if 'costo_matricula' in df.columns:
#     df['costo_matricula'] = df['costo_matricula'].fillna(df['costo_matricula'].mean())
# if 'duracion_meses' in df.columns:
#     df['duracion_meses'] = df['duracion_meses'].fillna(df['duracion_meses'].mean())

# Agrupar por programa
programa_valor = df.groupby('id_programa').agg(
    estudiantes_activos=('id_estudiante', 'count'),
    promedio_academico=('promedio', 'mean'),
    # costo_matricula=('costo_matricula', 'mean') # Removed as column is missing
)

# Calculate a simplified "value" based on available columns
programa_valor['valor_relativo_simplificado'] = programa_valor['estudiantes_activos'] * programa_valor['promedio_academico']


# Ordenar by this simplified value and students
programa_valor_ordenado = programa_valor.sort_values(by=['valor_relativo_simplificado','estudiantes_activos'], ascending=False)

print("\n===== Programas con mayor valor (simplificado) y con mayor cantidad de estudiantes =====")
print(programa_valor_ordenado)

# ===========================================
# üßæ Separar tablas desde un Excel relacional
# Autor: Miro
# Descripci√≥n: Carga un Excel con varias hojas y exporta cada hoja a un archivo separado.
# ===========================================

import pandas as pd

# 1Ô∏è‚É£ Subir el archivo desde tu computadora a Colab
from google.colab import files
print("üì§ Sube tu archivo Excel (por ejemplo: base_datos.xlsx)")
uploaded = files.upload()

# 2Ô∏è‚É£ Especifica el nombre del archivo cargado
nombre_archivo = list(uploaded.keys())[0]

# 3Ô∏è‚É£ Leer todas las hojas del archivo Excel en un diccionario
data = pd.read_excel(nombre_archivo, sheet_name=None)

print(f"\nüìö Hojas encontradas en {nombre_archivo}:")
for hoja in data.keys():
    print(f" - {hoja}")

# 4Ô∏è‚É£ Guardar cada hoja como un Excel independiente
for nombre_hoja, df in data.items():
    nombre_salida = f"{nombre_hoja}.xlsx"
    df.to_excel(nombre_salida, index=False)
    print(f"‚úÖ Tabla '{nombre_hoja}' exportada como '{nombre_salida}'")

print("\nüéØ Proceso completado. Ahora puedes descargar los archivos generados.")

# 5Ô∏è‚É£ Permitir descarga directa desde Colab
for nombre_hoja in data.keys():
    files.download(f"{nombre_hoja}.xlsx")

# ===========================================
# üìä Separar hojas de un Excel y exportar a CSV
# Autor: Miro
# Descripci√≥n: Carga un Excel con m√∫ltiples hojas y exporta cada una a un archivo CSV individual.
# ===========================================

import pandas as pd
from google.colab import files

# 1Ô∏è‚É£ Subir el archivo Excel desde tu computador
print("üì§ Sube tu archivo Excel (por ejemplo: base_datos.xlsx)")
uploaded = files.upload()

# 2Ô∏è‚É£ Obtener el nombre del archivo subido
nombre_archivo = list(uploaded.keys())[0]

# 3Ô∏è‚É£ Leer todas las hojas del archivo Excel en un diccionario
data = pd.read_excel(nombre_archivo, sheet_name=None)

print(f"\nüìö Hojas encontradas en {nombre_archivo}:")
for hoja in data.keys():
    print(f" - {hoja}")

# 4Ô∏è‚É£ Guardar cada hoja como CSV
for nombre_hoja, df in data.items():
    nombre_salida = f"{nombre_hoja}.csv"
    df.to_csv(nombre_salida, index=False, encoding='utf-8-sig')
    print(f"‚úÖ Tabla '{nombre_hoja}' exportada como '{nombre_salida}'")

print("\nüéØ Proceso completado. Archivos listos para descargar:")

# 5Ô∏è‚É£ Permitir descargar los archivos CSV generados
for nombre_hoja in data.keys():
    files.download(f"{nombre_hoja}.csv")

import pandas as pd
import pyodbc

# üîå Conexi√≥n a SQL Server
conn = pyodbc.connect(
    'DRIVER={ODBC Driver 17 for SQL Server};'
    'SERVER=TU_SERVIDOR;'
    'DATABASE=TU_BASE_DE_DATOS;'
    'Trusted_Connection=yes;'
)

# Cargar la tabla
df_programas = pd.read_sql('/content/dim_programas.csv', conn)

# --- Paso 1: Instalar y cargar librer√≠as ---
!pip install pandas seaborn matplotlib openpyxl

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# --- Paso 2: Subir el archivo CSV desde tu PC ---
from google.colab import files
uploaded = files.upload()

# --- Paso 3: Cargar el CSV a un DataFrame ---
# Ajusta el nombre al archivo que subas (por ejemplo: dim_estudiantes.csv)
df = pd.read_excel("/content/dim_estudiantes (1).xlsx")

# --- Paso 4: Verificar estructura y tipos de datos ---
print("Primeras filas:")
display(df.head())
print("\nInformaci√≥n del DataFrame:")
print(df.info())

# --- Paso 5: Limpiar o transformar columnas si es necesario ---
# Convertir edad and estrato to numerical, handling potential errors
df["edad"] = pd.to_numeric(df["edad"], errors="coerce")
df["estrato"] = pd.to_numeric(df["estrato"], errors="coerce")

# --- Paso 6: An√°lisis descriptivo por g√©nero, edad y estrato ---
# Agrupar by g√©nero
# Checking if 'genero' column exists before grouping
if 'genero' in df.columns:
    desempeno_genero = df.groupby("genero")[["edad", "estrato"]].mean().reset_index()
    print("\nPromedios por g√©nero:")
    display(desempeno_genero)
else:
    print("\nColumn 'genero' not found in DataFrame. Skipping analysis by gender.")


# --- Paso 7: Visualizaciones ---
# Checking if 'edad' column exists before plotting
if 'edad' in df.columns:
    plt.figure(figsize=(8, 5))
    sns.histplot(df["edad"], kde=True, bins=10)
    plt.title("Distribuci√≥n de edades")
    plt.show()
else:
    print("\nColumn 'edad' not found in DataFrame. Skipping age distribution plot.")

# Checking if 'genero' column exists before plotting
if 'genero' in df.columns:
    plt.figure(figsize=(6, 4))
    sns.countplot(data=df, x="genero")
    plt.title("Distribuci√≥n por g√©nero")
    plt.show()
else:
    print("\nColumn 'genero' not found in DataFrame. Skipping gender distribution plot.")

# Checking if 'estrato' column exists before plotting
if 'estrato' in df.columns:
    plt.figure(figsize=(6, 4))
    sns.countplot(data=df, x="estrato")
    plt.title("Distribuci√≥n por estrato socioecon√≥mico")
    plt.show()
else:
    print("\nColumn 'estrato' not found in DataFrame. Skipping estrato distribution plot.")

# --- Paso 1: Instalar y cargar librer√≠as ---
!pip install pandas openpyxl

import pandas as pd

# --- Paso 2: Subir el archivo desde tu PC ---
from google.colab import files
uploaded = files.upload()

# --- Paso 3: Cargar el archivo a un DataFrame ---
# Ajusta el nombre al archivo que subas (por ejemplo: dim_estudiantes.xlsx)
df = pd.read_excel("/content/dim_estudiantes (1).xlsx")

# --- Paso 4: Verificar estructura y tipos de datos ---
print("Primeras filas:")
print(df.head())
print("\nInformaci√≥n del DataFrame:")
print(df.info())

# --- Paso 5: Limpiar o transformar columnas si es necesario ---
# Convertir edad y estrato a num√©rico, manejando errores
df["edad"] = pd.to_numeric(df["edad"], errors="coerce")
df["estrato"] = pd.to_numeric(df["estrato"], errors="coerce")

# --- Paso 6: An√°lisis descriptivo general ---
print("\nEstad√≠sticas descriptivas generales:")
print(df.describe(include='all'))

# --- Paso 7: Promedios por g√©nero (si la columna existe) ---
if 'genero' in df.columns:
    desempeno_genero = df.groupby("genero")[["edad", "estrato"]].mean().reset_index()
    print("\nPromedios de edad y estrato por g√©nero:")
    print(desempeno_genero)
else:
    print("\nLa columna 'genero' no se encuentra en el DataFrame. Se omite este an√°lisis.")

# --- Paso 8: Conteos por g√©nero, estrato y otros (si existen) ---
if 'genero' in df.columns:
    print("\nConteo de registros por g√©nero:")
    print(df['genero'].value_counts())

if 'estrato' in df.columns:
    print("\nConteo de registros por estrato:")
    print(df['estrato'].value_counts())

# --- Paso 9: Estad√≠sticas adicionales espec√≠ficas ---
if 'edad' in df.columns:
    print("\nEdad m√≠nima:", df['edad'].min())
    print("Edad m√°xima:", df['edad'].max())
    print("Edad promedio:", df['edad'].mean())
    print("Mediana de edad:", df['edad'].median())

if 'estrato' in df.columns:
    print("\nEstrato m√≠nimo:", df['estrato'].min())
    print("Estrato m√°ximo:", df['estrato'].max())
    print("Estrato promedio:", df['estrato'].mean())
    print("Mediana de estrato:", df['estrato'].median())